{"version":3,"sources":["api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","a","endpoint","options","fetch","response","ok","Error","status","statusText","json","getUserPosts","userId","requestUrl","posts","getPostDetails","postId","postDetails","Loader","className","PostsList","selectedUserId","selectedPostId","onPostSelect","useState","setPosts","isLoading","setIsLoading","useEffect","postsFromAPI","length","map","post","isPostSelected","id","title","type","classNames","onClick","getPostComments","comments","deletePostComment","commentId","method","deletedPost","addPostComment","comment","headers","body","JSON","stringify","newComment","NewCommentForm","onCommentAdd","name","setName","email","setEmail","setBody","onSubmit","e","preventDefault","onChange","currentTarget","value","placeholder","required","PostDetails","setPost","setComments","isHidden","setIsHidden","Promise","all","newPost","newComments","handleCommentAdd","current","filter","style","textAlign","marginBottom","UserSelect","users","onUserChange","htmlFor","user","getUsers","App","setUsers","setSelectedUserId","setSelectedPostId","usersFromAPI","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12bd5e85.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (endpoint = '', options = {}) => {\n  const response = await fetch(`${BASE_URL}${endpoint}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n","import { request } from './api';\n\nexport const getUserPosts = async (userId: string): Promise<Post[]> => {\n  const requestUrl = userId ? `/posts?userId=${userId}` : '/posts';\n\n  const posts = await request(requestUrl);\n\n  return posts;\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post> => {\n  const postDetails = await request(`/posts/${postId}`);\n\n  return postDetails;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedUserId: string;\n  selectedPostId: number | null;\n  onPostSelect: (value: number | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  selectedPostId,\n  onPostSelect,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n      const postsFromAPI = await getUserPosts(selectedUserId);\n\n      setPosts(postsFromAPI);\n      setIsLoading(false);\n    })();\n  }, [selectedUserId]);\n\n  if (isLoading) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {posts.length ? (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => {\n            const isPostSelected = post.id === selectedPostId;\n\n            return (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n                <button\n                  type=\"button\"\n                  className={classNames(\n                    'PostsList__button button',\n                    {\n                      'button--active': isPostSelected,\n                    },\n                  )}\n                  onClick={() => onPostSelect(\n                    isPostSelected ? null : post.id,\n                  )}\n                >\n                  {isPostSelected ? 'Close' : 'Open'}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>This user has no posts</p>\n      )}\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getPostComments = async (postId: number): Promise<PostComment[]> => {\n  const comments = await request(`/comments?postId=${postId}`);\n\n  return comments;\n};\n\nexport const deletePostComment = async (commentId: number) => {\n  const deletedPost = await request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\n  return deletedPost;\n};\n\nexport const addPostComment = async (comment: Partial<PostComment>): Promise<PostComment> => {\n  const newComment: PostComment = await request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n\n  return newComment;\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n  onCommentAdd: (value: Partial<PostComment>) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  onCommentAdd,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleNewCommentSubmit: React.FormEventHandler = (e) => {\n    e.preventDefault();\n\n    onCommentAdd({\n      postId,\n      name,\n      email,\n      body,\n    });\n\n    clearForm();\n  };\n\n  return (\n    <form onSubmit={handleNewCommentSubmit} className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          onChange={(e) => setName(e.currentTarget.value)}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          onChange={(e) => setEmail(e.currentTarget.value)}\n          value={email}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          onChange={(e) => setBody(e.currentTarget.value)}\n          value={body}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { addPostComment, deletePostComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post>({} as Post);\n  const [comments, setComments] = useState<PostComment[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isHidden, setIsHidden] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n\n      const [newPost, newComments] = await Promise.all([\n        getPostDetails(postId),\n        getPostComments(postId),\n      ]);\n\n      setPost(newPost);\n      setComments(newComments);\n\n      setIsLoading(false);\n    })();\n  }, [postId]);\n\n  const handleCommentDelete = (commentId: number) => {\n    deletePostComment(commentId);\n\n    setComments(current => current.filter(({ id }) => commentId !== id));\n  };\n\n  const handleCommentAdd = async (comment: Partial<PostComment>) => {\n    const newComment = await addPostComment(comment);\n\n    setComments(current => [...current, newComment]);\n  };\n\n  if (isLoading) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length ? (\n          <>\n            <button\n              type=\"button\"\n              className={classNames(\n                'button',\n                {\n                  'button--active': isHidden,\n                },\n              )}\n              onClick={() => setIsHidden(current => !current)}\n            >\n              {`${isHidden ? 'Show' : 'Hide'}\n              ${comments.length} comments`}\n            </button>\n\n            <ul className=\"PostDetails__list\">\n              {!isHidden && comments.map(comment => (\n                <li key={comment.id} className=\"PostDetails__list-item\">\n                  <button\n                    onClick={() => handleCommentDelete(comment.id)}\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          </>\n        ) : (\n          <p style={{\n            textAlign: 'center',\n            marginBottom: 10,\n          }}\n          >\n            There is no comments 🤷‍♀️\n          </p>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            onCommentAdd={handleCommentAdd}\n            postId={postId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  users: User[];\n  selectedUserId: string;\n  onUserChange: (value: string) => void;\n};\n\nexport const UserSelect: React.FC<Props> = ({\n  users,\n  selectedUserId,\n  onUserChange,\n}) => (\n  <label htmlFor=\"userSelect\">\n    Select a user: &nbsp;\n\n    <select\n      id=\"userSelect\"\n      value={selectedUserId}\n      className=\"App__user-selector\"\n      onChange={(e) => onUserChange(e.currentTarget.value)}\n    >\n      <option value=\"\">All users</option>\n      {users.map(user => (\n        <option\n          value={user.id}\n          key={user.id}\n        >\n          {user.name}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n","import { request } from './api';\n\nexport const getUsers = async (): Promise<User[]> => {\n  const users = await request('/users');\n\n  return users;\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  useEffect(() => {\n    (async () => {\n      const usersFromAPI = await getUsers();\n\n      setUsers(usersFromAPI);\n    })();\n  }, []);\n\n  const handleUserChange = (userId: string) => {\n    setSelectedUserId(userId);\n    setSelectedPostId(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          users={users}\n          selectedUserId={selectedUserId}\n          onUserChange={handleUserChange}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            onPostSelect={setSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails\n              postId={selectedPostId}\n            />\n          ) : (\n            <h2>Select post to see details</h2>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}